{"version":3,"sources":["styles/TestWord.module.css","styles/FrequencyGraph.module.css","styles/Reference.module.css","styles/PhonemeDisplay.module.css","styles/Common.module.css","styles/WordDisplay.module.css","styles/Test.module.css","styles/App.module.css","styles/Complete.module.css","lib/storage.js","lib/decoder.js","lib/frequencies.js","components/PhonemeDisplay.js","components/FrequencyGraph.js","components/WordDisplay.js","components/Common.js","components/PhraseDisplay.js","components/Complete.js","components/Reference.js","components/TestWord.js","components/Test.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","testWord","active","topRow","button","word","phonemeWrap","complete","dropError","graph","percent","label","count","bar","spacer","phonemeReference","searchDisplay","groups","groupName","phonemeKey","phoneme","phonemeDisplay","symbolWrap","symbol","common","words","message","wordDisplay","testWords","inactiveWords","header","download","useLocalStorage","key","initialValue","_useState","useState","localValue","localStorage","getItem","JSON","parse","_useState2","Object","slicedToArray","value","setValue","setItem","stringify","decoder","decodedData","setDecodedData","afterColon","text","substring","indexOf","trim","removeTrailingDigit","test","slice","queryWord","_x","_queryWord","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","definition","wrap","_context","prev","next","concat","toLowerCase","fetch","sent","json","abrupt","def","length","phonemes","tags","split","map","ipa","stop","_decodePhrase","_callee3","phrase","queried","decodeds","defs","_context3","replace","_ref","_callee2","decoded","_context2","objectSpread","defineProperty","_x3","Promise","all","decodePhrase","_x2","getFrequencies","zeros","reduce","p","frequencies","d","sorted","entries","sort","b","total","entry","PhonemeDisplay","props","symbols","colorCode","colors","color","react_default","createElement","draggable","onDragStart","e","stopPropagation","dataTransfer","setData","className","styles","width","height","viewBox","shape","stroke","cx","cy","r","strokeWidth","fill","x","y","points","svgSymbol","FrequencyGraph","max","values","Fragment","totalPercent","barPercent","toFixed","components_PhonemeDisplay","style","WordDisplay","index","Common","isOpen","setIsOpen","_useState3","_useState4","frequencyIsOpen","setFrequencyIsOpen","_useState5","_useState6","setFrequencies","_useState7","_useState8","frequenciesTotal","setFrequenciesTotal","_useState9","_useState10","input","setInput","_useState11","_useState12","search","setSearch","_useState13","_useState14","results","setResults","_useState15","_useState16","setMessage","useEffect","_getFrequencies","countDefs","dc","_getFrequencies2","picked","parseInt","filter","includes","setTimeout","onClick","components_FrequencyGraph","onSubmit","preventDefault","type","placeholder","onChange","target","countDef","components_WordDisplay","PhraseDisplay","Complete","components_PhraseDisplay","Reference","searchDefs","setSearchDefs","referenceDefs","setReferenceDefs","phonemeGroup","group","groupPhonemes","then","join","dict","htmlFor","shownCount","setShownCount","clickTime","setClickTime","setDropError","isComplete","isActive","classes","handleDoubleClick","onComplete","onActivate","onMouseDown","now","Date","onDoubleClick","onDragOver","onDrop","dropPhoneme","getData","onRemove","path","createButton","Test","add","setAdd","activeWord","setActiveWord","onAdd","document","getElementById","focus","handleActivate","undefined","id","TestWord","App","saveUrl","setSaveUrl","_useLocalStorage","_useLocalStorage2","setTest","_useLocalStorage3","_useLocalStorage4","setComplete","_useLocalStorage5","_useLocalStorage6","setDecoded","commonWords","commonData","c","setCommon","href","t","completeWords","data","file","File","window","URL","createObjectURL","components_Test","uniques","Array","from","Set","toConsumableArray","unique","ok","components_Reference","components_Complete","components_Common","Boolean","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48b776e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"testWord\":\"TestWord_testWord__3cCGq\",\"active\":\"TestWord_active__3pieK\",\"topRow\":\"TestWord_topRow__I3-eN\",\"button\":\"TestWord_button__2waDw\",\"word\":\"TestWord_word__2txvU\",\"phonemeWrap\":\"TestWord_phonemeWrap__1-aqv\",\"complete\":\"TestWord_complete__2FT9h\",\"dropError\":\"TestWord_dropError__3gas9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"FrequencyGraph_graph__1Ekfh\",\"percent\":\"FrequencyGraph_percent__223Kv\",\"label\":\"FrequencyGraph_label__3d7O8\",\"count\":\"FrequencyGraph_count__2RJ1P\",\"bar\":\"FrequencyGraph_bar__n31lJ\",\"spacer\":\"FrequencyGraph_spacer__2y7VK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonemeReference\":\"Reference_phonemeReference__2cVnO\",\"searchDisplay\":\"Reference_searchDisplay__3hVRR\",\"groups\":\"Reference_groups__1sppk\",\"groupName\":\"Reference_groupName__3EPw3\",\"phonemeKey\":\"Reference_phonemeKey__2qODb\",\"phoneme\":\"Reference_phoneme__yvJPE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonemeDisplay\":\"PhonemeDisplay_phonemeDisplay__qrkdg\",\"symbolWrap\":\"PhonemeDisplay_symbolWrap__1JoAX\",\"symbol\":\"PhonemeDisplay_symbol__2Uyoc\",\"phoneme\":\"PhonemeDisplay_phoneme__3wI-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"common\":\"Common_common__Asuj_\",\"words\":\"Common_words__3h9Le\",\"count\":\"Common_count__3Tmh4\",\"message\":\"Common_message__2a0uU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordDisplay\":\"WordDisplay_wordDisplay__2Ljrx\",\"word\":\"WordDisplay_word__1A1Jz\",\"phonemeWrap\":\"WordDisplay_phonemeWrap__7WjFb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testWords\":\"Test_testWords__1rIbF\",\"inactiveWords\":\"Test_inactiveWords__b88SP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__tl37K\",\"download\":\"App_download__1PpXR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"complete\":\"Complete_complete__1Gjk7\"};","import { useState } from 'react';\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  const [value, setValue] = useState(() => {\r\n    const localValue = localStorage.getItem(key);\r\n    if (localValue) {\r\n      return JSON.parse(localValue);\r\n    }\r\n    return initialValue;\r\n  });\r\n\r\n  function setLocalValue(localValue) {\r\n    setValue(localValue);\r\n    localStorage.setItem(key, JSON.stringify(localValue));\r\n  };\r\n\r\n  return [value, setLocalValue];\r\n}\r\n","function decoder(decodedData, setDecodedData) {\n  function afterColon(text) {\n    return text.substring(text.indexOf(':') + 1).trim();\n  }\n\n  function removeTrailingDigit(text) {\n    return (/\\d$/.test(text) ? text.slice(0, -1) : text);\n  }\n\n  function definitionToDecoded(def) {\n    if (def.length === 0) {\n      return {};\n    }\n    const word = def[0].word;\n    const phonemesText = afterColon(def[0].tags[0]);\n    const phonemes = phonemesText.split(' ').map(removeTrailingDigit);\n    const ipa = afterColon(def[0].tags[1]);\n    return {\n      word,\n      phonemes,\n      ipa,\n    };\n  }\n\n  async function queryWord(word) {\n    const url = `https://api.datamuse.com/words?sp=${word.toLowerCase()}&md=r+d&ipa=1&max=1`;\n    const response = await fetch(url);\n    const definition = await response.json();\n    return definitionToDecoded(definition);\n  };\n\n  function removePunctuation(text) {\n    return text.replace(/[.,!?]/g, '');\n  }\n\n  async function decodePhrase(phrase) {\n    const words = removePunctuation(phrase.toLowerCase()).split(' ');\n    let queried = {};\n    const decodeds = words.map(async (word) => {\n      let decoded = decodedData[word];\n      if (!decoded) {\n        decoded = await queryWord(word);\n        queried = { ...queried, [decoded.word]: decoded };\n      }\n      return decoded;\n    });\n    const defs = await Promise.all(decodeds);\n    setDecodedData({ ...decodedData, ...queried });\n    return defs;\n  }\n\n  return {\n    decodePhrase,\n  };\n};\n\nexport default decoder;\n","import phonemes from '../data/phonemes';\n\nexport function getFrequencies(defs) {\n  const zeros = phonemes.reduce((zeros, p) => {\n    return { ...zeros, [p]: 0 };\n  }, {});\n  const frequencies = defs.reduce((frequencies, d) => {\n    return d.phonemes.reduce((frequencies, p) => {\n      frequencies[p]++;\n      return frequencies;\n    }, frequencies);\n  }, zeros);\n  const sorted = Object.entries(frequencies).sort((a, b) => b[1] - a[1]);\n  const total = sorted.reduce((total, entry) => total + entry[1], 0);\n  return [sorted, total];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport colors from '../data/colors';\nimport symbols from '../data/symbols';\nimport styles from '../styles/PhonemeDisplay.module.css';\n\nfunction svgSymbol(shape, color) {\n  const stroke = '#404040';\n  if (shape === 'circle') {\n    return (<circle cx='50%' cy='50%' r='45%' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'square') {\n    return (<rect x='5%' y='5%' width='90%' height='90%' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'triangle') {\n    return (<polygon points='5,95 95,95 50,5' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'rhombus') {\n    return (<polygon points='50,95 90,50 50,5 10,50' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'star') {\n    return (<polygon\n      points='50,0 38.8,34.5 2.4,34.5 31.8,55.9 20.6,90.5 50,69.1 79.4,90.5 68.2,55.9 97.6,34.5 61.2,34.5'\n      strokeWidth='5%'\n      stroke={stroke}\n      fill={color}/>);\n  } else if (shape === 'hexagon') {\n    return (<polygon\n      points='98,50 74,91.6 26,91.6 2,50 26,8.4 74,8.4'\n      strokeWidth='5%'\n      stroke={stroke}\n      fill={color}/>);\n  }\n    return null;\n  ;\n}\n\nfunction PhonemeDisplay(props) {\n  const symbol = symbols[props.phoneme];\n  const colorCode = colors[symbol.color];\n\n  const handleDragStart = (e) => {\n    e.stopPropagation();\n    e.dataTransfer.setData('text', props.phoneme);\n  };\n\n  return (\n    <div draggable='true' onDragStart={handleDragStart} className={styles.phonemeDisplay}>\n      <div className={styles.symbolWrap}>\n        <div className={styles.symbol}>\n          <svg width='100%' height='100%' viewBox='0 0 100 100'>\n            {svgSymbol(symbol.shape, colorCode)}\n          </svg>\n        </div>\n      </div>\n      <div className={styles.phoneme}>\n        {props.phoneme}\n      </div>\n    </div>\n  );\n}\n\nPhonemeDisplay.propTypes = {\n  phoneme: PropTypes.string,\n};\n\nexport default PhonemeDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport styles from '../styles/FrequencyGraph.module.css';\n\nfunction FrequencyGraph(props) {\n  const max = props.values.length && props.values[0][1];\n  return (\n    <React.Fragment>\n      <div className={styles.graph}>\n        { props.values.map((value) => {\n          const totalPercent = (100 * (value[1] / props.total)) || 0;\n          const barPercent = (100 * (value[1] / max)) || 0;\n          return (\n            <React.Fragment key={value[0]}>\n              <div className={styles.percent}>{totalPercent.toFixed(1)}%</div>\n              <div className={styles.label}>\n                <PhonemeDisplay phoneme={value[0]}/>\n              </div>\n              <div className={styles.count}>{value[1]}</div>\n              <div\n                className={styles.bar}\n                style={{ width: `${barPercent}%` }}></div>\n              <div className={styles.spacer}></div>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nFrequencyGraph.propTypes = {\n  values: PropTypes.arrayOf(PropTypes.array),\n  total: PropTypes.number,\n};\n\nexport default FrequencyGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport styles from '../styles/WordDisplay.module.css';\n\nfunction WordDisplay(props) {\n  return (\n    <React.Fragment>\n      { props.def && (\n      <div className={styles.wordDisplay}>\n        <div className={styles.word}>\n          {props.def.word}\n        </div>\n        <div className={styles.phonemeWrap}>\n          {props.def.phonemes.map((phoneme, index) => (\n            <PhonemeDisplay\n              key={`${props.def.word}:${phoneme}:${index}`}\n              phoneme={phoneme}/>\n          ))}\n        </div>\n      </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nWordDisplay.propTypes = {\n  def: PropTypes.object,\n};\n\nexport default WordDisplay;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getFrequencies } from '../lib/frequencies';\nimport FrequencyGraph from './FrequencyGraph';\nimport WordDisplay from './WordDisplay';\nimport styles from '../styles/Common.module.css';\n\nfunction Common(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [frequencyIsOpen, setFrequencyIsOpen] = useState(true);\n  const [frequencies, setFrequencies] = useState([]);\n  const [frequenciesTotal, setFrequenciesTotal] = useState(0);\n  const [input, setInput] = useState('');\n  const [search, setSearch] = useState('');\n  const [results, setResults] = useState([]);\n  const [message, setMessage] = useState('');\n  const resultsMax = 100;\n\n  useEffect(() => {\n    if (frequencyIsOpen) {\n      const [frequencies, total] = getFrequencies(props.countDefs.map((dc) => dc[1]));\n      setFrequencies(frequencies);\n      setFrequenciesTotal(total);\n    }\n  }, [frequencyIsOpen, props.countDefs]);\n\n  useEffect(() => {\n    const value = parseInt(search, 10);\n    let picked;\n\n    if (value) {\n      picked = props.countDefs.slice(value - 1, value - 1 + resultsMax);\n      if (picked.length > 0) {\n        setMessage(`Showing ${picked.length} common words starting at number ${value}`);\n      } else {\n        setMessage('No common words to show');\n      }\n    } else if (search) {\n      picked = props.countDefs.filter((def) => def[1].word.includes(search));\n      if (picked.length > 0) {\n        setMessage(`Showing ${picked.length} common words that contain '${search}'`);\n      } else {\n        setMessage(`No common words contain '${search}'`);\n      }\n    } else {\n      picked = (props.countDefs.slice(0, resultsMax));\n      setMessage('');\n    }\n    setResults([]);\n    setTimeout(() => setResults(picked), 10);\n  }, [props.countDefs, search]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setSearch(input);\n    setInput('');\n  };\n\n  const handleReset = (e) => {\n    e.preventDefault();\n    setSearch('');\n    setMessage('');\n  };\n\n  return (\n    <div className='common'>\n      <div className={styles.common}>\n        <div\n          className='title'\n          onClick={() => setIsOpen(!isOpen)}>\n          Most Common English Words\n        </div>\n        { isOpen && (\n          <React.Fragment>\n            <div\n              className='subtitle'\n              onClick={() => setFrequencyIsOpen(!frequencyIsOpen)}>\n              Phoneme Frequency\n              { frequencyIsOpen && (\n                <FrequencyGraph\n                  values={frequencies}\n                  total={frequenciesTotal}/>\n              )}\n            </div>\n            <div>\n              <form onSubmit={onSubmit}>\n                <input\n                  type='text'\n                  placeholder='Number or word fragment'\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}/>\n                <button className='margin-left-4' type='submit'>Search</button>\n                <button className='margin-left-4' onClick={handleReset}>Reset</button>\n                <span className={styles.message}>{message}</span>\n              </form>\n            </div>\n            <div className={styles.words}>\n              { results.map((countDef, index) => (\n                <React.Fragment key={countDef[1].word + index}>\n                  <div>\n                    <div className={styles.count}>{countDef[0]}</div>\n                    <WordDisplay def={countDef[1]}/>\n                  </div>\n                </React.Fragment>\n              ))}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nCommon.propTypes = {\n  countDefs: PropTypes.arrayOf(PropTypes.array),\n};\n\nexport default Common;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WordDisplay from './WordDisplay';\n\nfunction PhraseDisplay(props) {\n  return (\n    <React.Fragment>\n      {props.defs.map((def) => (\n        <WordDisplay key={def.word} def={def} />\n      ))}\n    </React.Fragment>\n  );\n}\n\nPhraseDisplay.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default PhraseDisplay;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getFrequencies } from '../lib/frequencies';\nimport FrequencyGraph from './FrequencyGraph';\nimport PhraseDisplay from './PhraseDisplay';\nimport styles from '../styles/Complete.module.css';\n\nfunction Complete(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [frequencyIsOpen, setFrequencyIsOpen] = useState(false);\n  const [frequencies, setFrequencies] = useState([]);\n  const [frequenciesTotal, setFrequenciesTotal] = useState(0);\n\n  useEffect(() => {\n    if (frequencyIsOpen) {\n      const [frequencies, total] = getFrequencies(props.defs);\n      setFrequencies(frequencies);\n      setFrequenciesTotal(total);\n    }\n  }, [frequencyIsOpen, props.defs]);\n\n  return (\n    <div className='complete'>\n      <div className={styles.complete}>\n        <div\n          className='title'\n          onClick={() => setIsOpen(!isOpen)}>\n          Complete Words\n        </div>\n        { isOpen && (\n          <React.Fragment>\n            <div\n              className='subtitle'\n              onClick={() => setFrequencyIsOpen(!frequencyIsOpen)}>\n              Phoneme Frequency\n              { frequencyIsOpen && (\n                <FrequencyGraph\n                  values={frequencies}\n                  total={frequenciesTotal}/>\n              )}\n            </div>\n            <PhraseDisplay defs={props.defs}/>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nComplete.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Complete;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport groups from '../data/groups';\nimport groupPhonemes from '../data/groupPhonemes';\nimport words from '../data/words';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport PhraseDisplay from './PhraseDisplay';\nimport WordDisplay from './WordDisplay';\nimport styles from '../styles/Reference.module.css';\n\nfunction Reference(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [input, setInput] = useState('');\n  const [search, setSearch] = useState('');\n  const [searchDefs, setSearchDefs] = useState([]);\n  const [referenceDefs, setReferenceDefs] = useState({});\n\n  useEffect(() => {\n    if (search) {\n      props.decodePhrase(search).then((decoded) => {\n        setSearchDefs(decoded);\n      });\n    } else {\n      setSearchDefs([]);\n    }\n  }, [search]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setSearch(input);\n    setInput('');\n  };\n\n  const handleClear = (e) => {\n    e.preventDefault();\n    setSearch('');\n  };\n\n  useEffect(() => {\n    const phrase = Object.values(words).join(' ');\n    props.decodePhrase(phrase).then((decoded) => {\n        setReferenceDefs(decoded.reduce((dict, def) => {\n          return { ...dict, [def.word]: def };\n        }, {}));\n    });\n  }, []);\n\n  function phonemeKey(phoneme, def) {\n    return (\n      <React.Fragment key={phoneme}>\n        <div className={styles.phonemeKey}>\n          <span className={styles.phoneme}>\n            <PhonemeDisplay phoneme={phoneme}/>\n          </span>\n          <WordDisplay def={def}/>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  function phonemeGroup(group, defs) {\n    return (\n      <React.Fragment key={group}>\n        <div className={styles.groupName}>{ group }</div>\n        { groupPhonemes[group].map((phoneme) => (\n          <div key={phoneme}>\n            { phonemeKey(phoneme, defs[words[phoneme]]) }\n          </div>\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className='phonemeReference'>\n      <div className={styles.phonemeReference}>\n        <div\n          className='title'\n          htmlFor='search'\n          onClick={() => setIsOpen(!isOpen)}>\n          Phoneme Reference\n        </div>\n        { isOpen && (\n          <React.Fragment>\n            <form onSubmit={onSubmit}>\n              <input type='text' value={input} onChange={(e) => setInput(e.target.value)}/>\n              <button className='margin-left-4' type='submit'>Search</button>\n              <button className='margin-left-4' onClick={handleClear}>Clear</button>\n            </form>\n            <div className={styles.searchDisplay}>\n              <PhraseDisplay defs={searchDefs}/>\n            </div>\n            <div className={styles.groups}>\n              { groups.map((group) => phonemeGroup(group, referenceDefs)) }\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nReference.propTypes = {\n  decodePhrase: PropTypes.func,\n};\n\nexport default Reference;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport styles from '../styles/TestWord.module.css';\n\nfunction WordDisplay(props) {\n  const [shownCount, setShownCount] = useState(0);\n  const [clickTime, setClickTime] = useState(0);\n  const [dropError, setDropError] = useState(false);\n  const isComplete = props.isActive && (shownCount === props.def.phonemes.length);\n  const classes = (props.isActive ? ' ' + styles.active : '') +\n    (isComplete ? ' ' + styles.complete : '') +\n    (dropError ? ' ' + styles.dropError : '');\n\n  useEffect(() => {\n    if (dropError) {\n      setTimeout(() => setDropError(false), 400);\n    }\n  }, [dropError]);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    const now = Date.now();\n    if ((now - clickTime) < 500) {\n      handleDoubleClick(e);\n    }\n    setClickTime(now);\n  };\n\n  const handleDoubleClick = (e) => {\n    if (isComplete) {\n      props.onComplete(props.def);\n    }\n    if (props.isActive) {\n      setShownCount(0);\n    }\n    props.onActivate(props.def.word, !props.isActive);\n  };\n\n  const handleDragOver = (e) => {\n    if (props.isActive && !isComplete) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const dropPhoneme = e.dataTransfer.getData('text');\n    if (props.isActive && !isComplete &&\n      (dropPhoneme === props.def.phonemes[shownCount])) {\n      setShownCount(shownCount + 1);\n    } else {\n      setDropError(true);\n    }\n  };\n\n  const createButton = (isComplete, { def, onRemove, onComplete }) => {\n    const path = isComplete ? 'M5 50 L 50 95 L 95 5' : 'M5 5 L 95 95 M 5 95 L 95 5';\n    return (\n      <button\n        className={styles.button}\n        onClick={ isComplete ? () => onComplete(def) : () => onRemove(def) }>\n        <svg width='100%' height='100%' viewBox='0 0 100 100'>\n          <path d={path} fill='transparent' stroke='#808080' strokeWidth='10'/>\n        </svg>\n      </button>);\n  };\n\n  return (\n    <React.Fragment>\n      { props.def && (\n        <div\n          className={styles.testWord + classes}\n          onMouseDown={(e) => e.preventDefault()}\n          onClick={handleClick}\n          onDoubleClick={handleDoubleClick}\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}>\n          <div className={styles.topRow}>\n            <div className={styles.word}>\n              {props.def.word}\n            </div>\n            { props.isActive &&\n                createButton(isComplete, props) }\n          </div>\n          <div className={styles.phonemeWrap + classes}>\n            { props.def.phonemes.map((phoneme, index) => (\n              (index < shownCount) &&\n              <PhonemeDisplay\n                key={phoneme}\n                phoneme={phoneme} />\n            ))}\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nWordDisplay.propTypes = {\n  def: PropTypes.object,\n  isActive: PropTypes.bool,\n  onActivate: PropTypes.func,\n  onRemove: PropTypes.func,\n  onComplete: PropTypes.func,\n};\n\nexport default WordDisplay;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TestWord from './TestWord';\nimport styles from '../styles/Test.module.css';\n\nfunction Test(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [input, setInput] = useState('');\n  const [add, setAdd] = useState('');\n  const [activeWord, setActiveWord] = useState();\n\n  useEffect(() => {\n    if (add) {\n      props.decodePhrase(add).then((decoded) => {\n        props.onAdd(decoded);\n      });\n      setAdd('');\n      document.getElementById('input').focus();\n    }\n  }, [add]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setAdd(input);\n    setInput('');\n  };\n\n  const handleActivate = (word, isActive) => {\n    setActiveWord(isActive ? word : undefined);\n  };\n\n  return (\n    <div className='testWords'>\n      <div className={styles.testWords}>\n        <div\n          className='title'\n          htmlFor='input'\n          onClick={() => setIsOpen(!isOpen)}>\n          Test Words\n        </div>\n        { isOpen && (\n          <React.Fragment>\n            <form onSubmit={onSubmit}>\n              <input id='input' type='text' value={input} onChange={(e) => setInput(e.target.value)}/>\n              <button className='margin-left-4' type='submit'>Add</button>\n            </form>\n            <div className={styles.inactiveWords}>\n              { props.defs.filter((d) => d.word !== activeWord).map((def) =>\n                (<TestWord\n                  key={def.word}\n                  def={def}\n                  isActive={def.word === activeWord}\n                  onActivate={handleActivate}/>\n                ))}\n            </div>\n            <div className={styles.activeWord}>\n              { props.defs.filter((d) => d.word === activeWord).map((def) =>\n                (<TestWord\n                  key={def.word}\n                  def={def}\n                  isActive={def.word === activeWord}\n                  onActivate={handleActivate}\n                  onRemove={props.onRemove}\n                  onComplete={props.onComplete}/>\n                ))}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nTest.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object),\n  decodePhrase: PropTypes.func,\n  onAdd: PropTypes.func,\n  onRemove: PropTypes.func,\n  onComplete: PropTypes.func,\n};\n\nexport default Test;\n","import React, { useEffect, useState } from 'react';\nimport commonData from '../data/common';\nimport decodedData from '../data/decoded';\nimport { useLocalStorage } from '../lib/storage';\nimport decoder from '../lib/decoder';\nimport Common from './Common';\nimport Complete from './Complete';\nimport Reference from './Reference';\nimport Test from './Test';\nimport styles from '../styles/App.module.css';\n\nfunction App(props) {\n  const [saveUrl, setSaveUrl] = useState(undefined);\n  const [test, setTest] = useLocalStorage('test', []);\n  const [complete, setComplete] = useLocalStorage('complete', []);\n  const [decoded, setDecoded] = useLocalStorage('decoded', decodedData);\n  const decodePhrase = decoder(decoded, setDecoded).decodePhrase;\n  const commonWords = commonData.map((c) => c.word);\n  const [common, setCommon] = useState([]);\n\n  useEffect(() => {\n    setCommon(commonWords.map((word, index) => [index + 1, decodedData[word.toLowerCase()]]));\n  }, []);\n\n  const save = () => {\n    const testWords = test.map((t) => t.word);\n    const completeWords = complete.map((c) => c.word);\n    const data = {\n      decoded,\n      test: testWords,\n      complete: completeWords,\n    };\n    const file = new File([JSON.stringify(data)], '');\n    setSaveUrl(window.URL.createObjectURL(file));\n  };\n\n  //??? add load\n\n  const addTest = (defs) => {\n    const uniques = Array.from(new Set(defs));\n    setTest([...test,\n      ...(uniques.filter((unique) => {\n        return test.reduce((ok, t) => {\n          return ok && (t.word !== unique.word);\n        }, true);\n      })),\n    ]);\n  };\n\n  const removeTest = (def) => {\n    setTest(test.filter((t) => t.word !== def.word));\n  };\n\n  const addComplete = (def) => {\n    setComplete([def, ...(complete.filter((c) => c.word !== def.word))]);\n    setTest(test.filter((t) => t.word !== def.word));\n  };\n\n  return (\n    <React.Fragment>\n      <header className={styles.header}>\n        <h1>Phoneme Finder</h1>\n        <div>\n          { saveUrl &&\n          <a className={styles.download} href={saveUrl} download='phonmeFinder.json'>Download</a>\n        }\n          <button onClick={save}>Save</button>\n        </div>\n      </header>\n      <main>\n        <Test\n          defs={test}\n          decodePhrase={decodePhrase}\n          onAdd={addTest}\n          onRemove={removeTest}\n          onComplete={addComplete}/>\n        <Reference decodePhrase={decodePhrase}/>\n        <Complete defs={complete}/>\n        <Common countDefs={common}/>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}