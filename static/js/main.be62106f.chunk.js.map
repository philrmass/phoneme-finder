{"version":3,"sources":["styles/TestWord.module.css","styles/Reference.module.css","styles/Common.module.css","styles/FrequencyGraph.module.css","styles/PhonemeDisplay.module.css","styles/Test.module.css","styles/WordDisplay.module.css","styles/Complete.module.css","styles/App.module.css","lib/storage.js","lib/decoder.js","components/PhonemeDisplay.js","components/WordDisplay.js","components/Common.js","components/FrequencyGraph.js","components/PhraseDisplay.js","components/Complete.js","lib/frequencies.js","components/Reference.js","components/TestWord.js","components/Test.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","testWord","active","topRow","button","word","phonemeWrap","complete","dropError","phonemeReference","title","searchDisplay","groups","groupName","phonemeKey","phoneme","common","words","count","graph","percent","label","bar","spacer","phonemeDisplay","symbolWrap","symbol","testWords","inactiveWords","inactiveWord","wordDisplay","subtitle","header","useLocalStorage","key","initialValue","_useState","useState","localValue","localStorage","getItem","JSON","parse","_useState2","Object","slicedToArray","value","setValue","setItem","stringify","decoder","decodedData","setDecodedData","afterColon","text","substring","indexOf","trim","removeTrailingDigit","test","slice","queryWord","_x","_queryWord","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","definition","wrap","_context","prev","next","concat","toLowerCase","fetch","sent","json","abrupt","def","length","phonemes","tags","split","map","ipa","stop","_decodePhrase","_callee3","phrase","queried","decodeds","defs","_context3","replace","_ref","_callee2","decoded","_context2","objectSpread","defineProperty","_x3","Promise","all","decodePhrase","_x2","PhonemeDisplay","props","symbols","colorCode","colors","color","react_default","createElement","draggable","onDragStart","e","stopPropagation","dataTransfer","setData","className","styles","width","height","viewBox","shape","stroke","cx","cy","r","strokeWidth","fill","x","y","points","svgSymbol","WordDisplay","Fragment","index","components_PhonemeDisplay","Common","isOpen","setIsOpen","onClick","components_WordDisplay","FrequencyGraph","max","values","totalPercent","total","barPercent","toFixed","style","PhraseDisplay","Complete","_useState3","_useState4","frequencyIsOpen","setFrequencyIsOpen","_useState5","_useState6","frequencies","setFrequencies","_useState7","_useState8","frequenciesTotal","setFrequenciesTotal","useEffect","_getFrequencies","zeros","reduce","p","d","sorted","entries","sort","b","entry","getFrequencies","_getFrequencies2","components_FrequencyGraph","components_PhraseDisplay","Reference","input","setInput","search","setSearch","searchDefs","setSearchDefs","_useState9","_useState10","referenceDefs","setReferenceDefs","phonemeGroup","group","groupPhonemes","then","join","dict","onSubmit","preventDefault","htmlFor","id","type","onChange","target","shownCount","setShownCount","clickTime","setClickTime","setDropError","isComplete","isActive","classes","setTimeout","handleDoubleClick","onComplete","onActivate","onMouseDown","now","Date","onDoubleClick","onDragOver","onDrop","dropPhoneme","getData","onRemove","path","createButton","Test","add","setAdd","activeWord","setActiveWord","onAdd","document","getElementById","focus","handleActivate","undefined","filter","TestWord","App","saveUrl","setSaveUrl","_useLocalStorage","_useLocalStorage2","setTest","_useLocalStorage3","_useLocalStorage4","setComplete","_useLocalStorage5","_useLocalStorage6","setDecoded","commonWords","commonData","c","setCommon","href","download","t","completeWords","data","file","File","window","URL","createObjectURL","components_Test","toConsumableArray","components_Reference","components_Complete","components_Common","Boolean","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be62106f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"testWord\":\"TestWord_testWord__3cCGq\",\"active\":\"TestWord_active__3pieK\",\"topRow\":\"TestWord_topRow__I3-eN\",\"button\":\"TestWord_button__2waDw\",\"word\":\"TestWord_word__2txvU\",\"phonemeWrap\":\"TestWord_phonemeWrap__1-aqv\",\"complete\":\"TestWord_complete__2FT9h\",\"dropError\":\"TestWord_dropError__3gas9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonemeReference\":\"Reference_phonemeReference__2cVnO\",\"title\":\"Reference_title__3Sqqo\",\"searchDisplay\":\"Reference_searchDisplay__3hVRR\",\"groups\":\"Reference_groups__1sppk\",\"groupName\":\"Reference_groupName__3EPw3\",\"phonemeKey\":\"Reference_phonemeKey__2qODb\",\"phoneme\":\"Reference_phoneme__yvJPE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"common\":\"Common_common__Asuj_\",\"title\":\"Common_title__35WfU\",\"words\":\"Common_words__3h9Le\",\"count\":\"Common_count__3Tmh4\",\"word\":\"Common_word__AkOi_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"FrequencyGraph_graph__1Ekfh\",\"percent\":\"FrequencyGraph_percent__223Kv\",\"label\":\"FrequencyGraph_label__3d7O8\",\"count\":\"FrequencyGraph_count__2RJ1P\",\"bar\":\"FrequencyGraph_bar__n31lJ\",\"spacer\":\"FrequencyGraph_spacer__2y7VK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonemeDisplay\":\"PhonemeDisplay_phonemeDisplay__qrkdg\",\"symbolWrap\":\"PhonemeDisplay_symbolWrap__1JoAX\",\"symbol\":\"PhonemeDisplay_symbol__2Uyoc\",\"phoneme\":\"PhonemeDisplay_phoneme__3wI-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testWords\":\"Test_testWords__1rIbF\",\"title\":\"Test_title__2izU3\",\"inactiveWords\":\"Test_inactiveWords__b88SP\",\"inactiveWord\":\"Test_inactiveWord__2q__p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wordDisplay\":\"WordDisplay_wordDisplay__2Ljrx\",\"word\":\"WordDisplay_word__1A1Jz\",\"phonemeWrap\":\"WordDisplay_phonemeWrap__7WjFb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"complete\":\"Complete_complete__1Gjk7\",\"title\":\"Complete_title__X9f6u\",\"subtitle\":\"Complete_subtitle__27N4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__tl37K\"};","import { useState } from 'react';\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  const [value, setValue] = useState(() => {\r\n    const localValue = localStorage.getItem(key);\r\n    if (localValue) {\r\n      return JSON.parse(localValue);\r\n    }\r\n    return initialValue;\r\n  });\r\n\r\n  function setLocalValue(localValue) {\r\n    setValue(localValue);\r\n    localStorage.setItem(key, JSON.stringify(localValue));\r\n  };\r\n\r\n  return [value, setLocalValue];\r\n}\r\n","function decoder(decodedData, setDecodedData) {\n  function afterColon(text) {\n    return text.substring(text.indexOf(':') + 1).trim();\n  }\n\n  function removeTrailingDigit(text) {\n    return (/\\d$/.test(text) ? text.slice(0, -1) : text);\n  }\n\n  function definitionToDecoded(def) {\n    if (def.length === 0) {\n      return {};\n    }\n    const word = def[0].word;\n    const phonemesText = afterColon(def[0].tags[0]);\n    const phonemes = phonemesText.split(' ').map(removeTrailingDigit);\n    const ipa = afterColon(def[0].tags[1]);\n    return {\n      word,\n      phonemes,\n      ipa,\n    };\n  }\n\n  async function queryWord(word) {\n    const url = `https://api.datamuse.com/words?sp=${word.toLowerCase()}&md=r+d&ipa=1&max=1`;\n    const response = await fetch(url);\n    const definition = await response.json();\n    return definitionToDecoded(definition);\n  };\n\n  function removePunctuation(text) {\n    return text.replace(/[.,!?]/g, '');\n  }\n\n  async function decodePhrase(phrase) {\n    const words = removePunctuation(phrase.toLowerCase()).split(' ');\n    let queried = {};\n    const decodeds = words.map(async (word) => {\n      let decoded = decodedData[word];\n      if (!decoded) {\n        decoded = await queryWord(word);\n        queried = { ...queried, [decoded.word]: decoded };\n      }\n      return decoded;\n    });\n    const defs = await Promise.all(decodeds);\n    setDecodedData({ ...decodedData, ...queried });\n    return defs;\n  }\n\n  return {\n    decodePhrase,\n  };\n};\n\nexport default decoder;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport colors from '../data/colors';\nimport symbols from '../data/symbols';\nimport styles from '../styles/PhonemeDisplay.module.css';\n\nfunction svgSymbol(shape, color) {\n  const stroke = '#404040';\n  if (shape === 'circle') {\n    return (<circle cx='50%' cy='50%' r='45%' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'square') {\n    return (<rect x='5%' y='5%' width='90%' height='90%' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'triangle') {\n    return (<polygon points='5,95 95,95 50,5' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'rhombus') {\n    return (<polygon points='50,95 90,50 50,5 10,50' strokeWidth='5%' stroke={stroke} fill={color} />);\n  } else if (shape === 'star') {\n    return (<polygon\n      points='50,0 38.8,34.5 2.4,34.5 31.8,55.9 20.6,90.5 50,69.1 79.4,90.5 68.2,55.9 97.6,34.5 61.2,34.5'\n      strokeWidth='5%'\n      stroke={stroke}\n      fill={color}/>);\n  } else if (shape === 'hexagon') {\n    return (<polygon\n      points='98,50 74,91.6 26,91.6 2,50 26,8.4 74,8.4'\n      strokeWidth='5%'\n      stroke={stroke}\n      fill={color}/>);\n  }\n    return null;\n  ;\n}\n\nfunction PhonemeDisplay(props) {\n  const symbol = symbols[props.phoneme];\n  const colorCode = colors[symbol.color];\n\n  const handleDragStart = (e) => {\n    e.stopPropagation();\n    e.dataTransfer.setData('text', props.phoneme);\n  };\n\n  return (\n    <div draggable='true' onDragStart={handleDragStart} className={styles.phonemeDisplay}>\n      <div className={styles.symbolWrap}>\n        <div className={styles.symbol}>\n          <svg width='100%' height='100%' viewBox='0 0 100 100'>\n            {svgSymbol(symbol.shape, colorCode)}\n          </svg>\n        </div>\n      </div>\n      <div className={styles.phoneme}>\n        {props.phoneme}\n      </div>\n    </div>\n  );\n}\n\nPhonemeDisplay.propTypes = {\n  phoneme: PropTypes.string,\n};\n\nexport default PhonemeDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport styles from '../styles/WordDisplay.module.css';\n\nfunction WordDisplay(props) {\n  return (\n    <React.Fragment>\n      { props.def && (\n      <div className={styles.wordDisplay}>\n        <div className={styles.word}>\n          {props.def.word}\n        </div>\n        <div className={styles.phonemeWrap}>\n          {props.def.phonemes.map((phoneme, index) => (\n            <PhonemeDisplay\n              key={`${props.def.word}:${phoneme}:${index}`}\n              phoneme={phoneme}/>\n          ))}\n        </div>\n      </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nWordDisplay.propTypes = {\n  def: PropTypes.object,\n};\n\nexport default WordDisplay;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport WordDisplay from './WordDisplay';\nimport styles from '../styles/Common.module.css';\n\nfunction Common(props) {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div className='common'>\n      <div className={styles.common}>\n        <div\n          className={styles.title}\n          onClick={() => setIsOpen(!isOpen)}>\n          Most Common English Words\n        </div>\n        { isOpen && (\n          <React.Fragment>\n            <div className={styles.subtitle}>Phoneme Frequency</div>\n            <div className={styles.words}>\n              { props.defs.map((def, index) => (\n                <React.Fragment key={def.word + index}>\n                  <div>\n                    <div className={styles.count}>{index + 1}</div>\n                    <div className={styles.word}>\n                      <WordDisplay def={def}/>\n                    </div>\n                  </div>\n                </React.Fragment>\n              ))}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nCommon.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Common;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport styles from '../styles/FrequencyGraph.module.css';\n\nfunction FrequencyGraph(props) {\n  const max = props.values.length && props.values[0][1];\n  return (\n    <React.Fragment>\n      <div className={styles.graph}>\n        { props.values.map((value) => {\n          const totalPercent = 100 * (value[1] / props.total);\n          const barPercent = 100 * (value[1] / max);\n          return (\n            <React.Fragment key={value[0]}>\n              <div className={styles.percent}>{totalPercent.toFixed(1)}%</div>\n              <div className={styles.label}>\n                <PhonemeDisplay phoneme={value[0]}/>\n              </div>\n              <div className={styles.count}>{value[1]}</div>\n              <div\n                className={styles.bar}\n                style={{ width: `${barPercent}%` }}></div>\n              <div className={styles.spacer}></div>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nFrequencyGraph.propTypes = {\n  values: PropTypes.arrayOf(PropTypes.array),\n  total: PropTypes.number,\n};\n\nexport default FrequencyGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WordDisplay from './WordDisplay';\n\nfunction PhraseDisplay(props) {\n  return (\n    <React.Fragment>\n      {props.defs.map((def) => (\n        <WordDisplay key={def.word} def={def} />\n      ))}\n    </React.Fragment>\n  );\n}\n\nPhraseDisplay.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default PhraseDisplay;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getFrequencies } from '../lib/frequencies';\nimport FrequencyGraph from './FrequencyGraph';\nimport PhraseDisplay from './PhraseDisplay';\nimport styles from '../styles/Complete.module.css';\n\nfunction Complete(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [frequencyIsOpen, setFrequencyIsOpen] = useState(true);\n  const [frequencies, setFrequencies] = useState([]);\n  const [frequenciesTotal, setFrequenciesTotal] = useState(0);\n\n  useEffect(() => {\n    if (frequencyIsOpen) {\n      const [frequencies, total] = getFrequencies(props.defs);\n      setFrequencies(frequencies);\n      setFrequenciesTotal(total);\n    }\n  }, [frequencyIsOpen, props.defs]);\n\n  return (\n    <div className='complete'>\n      <div className={styles.complete}>\n        <div\n          className={styles.title}\n          onClick={() => setIsOpen(!isOpen)}>\n          Complete Words\n        </div>\n        { isOpen && (\n          <React.Fragment>\n            <div\n              className={styles.subtitle}\n              onClick={() => setFrequencyIsOpen(!frequencyIsOpen)}>\n              Phoneme Frequency\n              { frequencyIsOpen && (\n                <FrequencyGraph\n                  values={frequencies}\n                  total={frequenciesTotal}/>\n              )}\n            </div>\n            <PhraseDisplay defs={props.defs}/>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n\nComplete.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default Complete;\n","import phonemes from '../data/phonemes';\n\nexport function getFrequencies(defs) {\n  const zeros = phonemes.reduce((zeros, p) => {\n    return { ...zeros, [p]: 0 };\n  }, {});\n  const frequencies = defs.reduce((frequencies, d) => {\n    return d.phonemes.reduce((frequencies, p) => {\n      frequencies[p]++;\n      return frequencies;\n    }, frequencies);\n  }, zeros);\n  const sorted = Object.entries(frequencies).sort((a, b) => b[1] - a[1]);\n  const total = sorted.reduce((total, entry) => total + entry[1], 0);\n  return [sorted, total];\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport groups from '../data/groups';\nimport groupPhonemes from '../data/groupPhonemes';\nimport words from '../data/words';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport PhraseDisplay from './PhraseDisplay';\nimport WordDisplay from './WordDisplay';\nimport styles from '../styles/Reference.module.css';\n\nfunction Reference(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [input, setInput] = useState('');\n  const [search, setSearch] = useState('');\n  const [searchDefs, setSearchDefs] = useState([]);\n  const [referenceDefs, setReferenceDefs] = useState({});\n\n  useEffect(() => {\n    if (search) {\n      props.decodePhrase(search).then((decoded) => {\n        setSearchDefs(decoded);\n      });\n    } else {\n      setSearchDefs([]);\n    }\n  }, [search]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setSearch(input);\n    setInput('');\n  };\n\n  const handleClear = (e) => {\n    e.preventDefault();\n    setSearch('');\n  };\n\n  useEffect(() => {\n    const phrase = Object.values(words).join(' ');\n    props.decodePhrase(phrase).then((decoded) => {\n        setReferenceDefs(decoded.reduce((dict, def) => {\n          return { ...dict, [def.word]: def };\n        }, {}));\n    });\n  }, []);\n\n  function phonemeKey(phoneme, def) {\n    return (\n      <React.Fragment key={phoneme}>\n        <div className={styles.phonemeKey}>\n          <span className={styles.phoneme}>\n            <PhonemeDisplay phoneme={phoneme}/>\n          </span>\n          <WordDisplay def={def}/>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  function phonemeGroup(group, defs) {\n    return (\n      <React.Fragment key={group}>\n        <div className={styles.groupName}>{ group }</div>\n        { groupPhonemes[group].map((phoneme) => (\n          <div key={phoneme}>\n            { phonemeKey(phoneme, defs[words[phoneme]]) }\n          </div>\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <div className='phonemeReference'>\n      <div className={styles.phonemeReference}>\n        <form onSubmit={onSubmit}>\n          <label\n            className={styles.title}\n            htmlFor='search'\n            onClick={() => setIsOpen(!isOpen)}>\n            Phoneme Reference\n          </label>\n          <input id='search' type='text' value={input} onChange={(e) => setInput(e.target.value)}/>\n          <button className='margin-left-4' type='submit'>Search</button>\n          <button className='margin-left-4' onClick={handleClear}>Clear</button>\n        </form>\n        <div className={styles.searchDisplay}>\n          <PhraseDisplay defs={searchDefs}/>\n        </div>\n        <div className={styles.groups}>\n          { groups.map((group) => phonemeGroup(group, referenceDefs)) }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nReference.propTypes = {\n  decodePhrase: PropTypes.func,\n};\n\nexport default Reference;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PhonemeDisplay from './PhonemeDisplay';\nimport styles from '../styles/TestWord.module.css';\n\nfunction WordDisplay(props) {\n  const [shownCount, setShownCount] = useState(0);\n  const [clickTime, setClickTime] = useState(0);\n  const [dropError, setDropError] = useState(false);\n  const isComplete = props.isActive && (shownCount === props.def.phonemes.length);\n  const classes = (props.isActive ? ' ' + styles.active : '') +\n    (isComplete ? ' ' + styles.complete : '') +\n    (dropError ? ' ' + styles.dropError : '');\n\n  useEffect(() => {\n    if (dropError) {\n      setTimeout(() => setDropError(false), 400);\n    }\n  }, [dropError]);\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    const now = Date.now();\n    if ((now - clickTime) < 500) {\n      handleDoubleClick(e);\n    }\n    setClickTime(now);\n  };\n\n  const handleDoubleClick = (e) => {\n    if (isComplete) {\n      props.onComplete(props.def);\n    }\n    if (props.isActive) {\n      setShownCount(0);\n    }\n    props.onActivate(props.def.word, !props.isActive);\n  };\n\n  const handleDragOver = (e) => {\n    if (props.isActive && !isComplete) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const dropPhoneme = e.dataTransfer.getData('text');\n    if (props.isActive && !isComplete &&\n      (dropPhoneme === props.def.phonemes[shownCount])) {\n      setShownCount(shownCount + 1);\n    } else {\n      setDropError(true);\n    }\n  };\n\n  const createButton = (isComplete, { def, onRemove, onComplete }) => {\n    const path = isComplete ? 'M5 50 L 50 95 L 95 5' : 'M5 5 L 95 95 M 5 95 L 95 5';\n    return (\n      <button\n        className={styles.button}\n        onClick={ isComplete ? () => onComplete(def) : () => onRemove(def) }>\n        <svg width='100%' height='100%' viewBox='0 0 100 100'>\n          <path d={path} fill='transparent' stroke='#808080' strokeWidth='10'/>\n        </svg>\n      </button>);\n  };\n\n  return (\n    <React.Fragment>\n      { props.def && (\n        <div\n          className={styles.testWord + classes}\n          onMouseDown={(e) => e.preventDefault()}\n          onClick={handleClick}\n          onDoubleClick={handleDoubleClick}\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}>\n          <div className={styles.topRow}>\n            <div className={styles.word}>\n              {props.def.word}\n            </div>\n            { props.isActive &&\n                createButton(isComplete, props) }\n          </div>\n          <div className={styles.phonemeWrap + classes}>\n            { props.def.phonemes.map((phoneme, index) => (\n              (index < shownCount) &&\n              <PhonemeDisplay\n                key={phoneme}\n                phoneme={phoneme} />\n            ))}\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nWordDisplay.propTypes = {\n  def: PropTypes.object,\n  isActive: PropTypes.bool,\n  onActivate: PropTypes.func,\n  onRemove: PropTypes.func,\n  onComplete: PropTypes.func,\n};\n\nexport default WordDisplay;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TestWord from './TestWord';\nimport styles from '../styles/Test.module.css';\n\nfunction Test(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [input, setInput] = useState('');\n  const [add, setAdd] = useState('');\n  const [activeWord, setActiveWord] = useState();\n\n  useEffect(() => {\n    if (add) {\n      props.decodePhrase(add).then((decoded) => {\n        props.onAdd(decoded);\n      });\n      setAdd('');\n      document.getElementById('input').focus();\n    }\n  }, [add]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setAdd(input);\n    setInput('');\n  };\n\n  const handleActivate = (word, isActive) => {\n    setActiveWord(isActive ? word : undefined);\n  };\n\n  return (\n    <div className='testWords'>\n      <div className={styles.testWords}>\n        <form onSubmit={onSubmit}>\n          <label\n            className={styles.title}\n            htmlFor='input'\n            onClick={() => setIsOpen(!isOpen)}>\n            Test Words\n          </label>\n          <input id='input' type='text' value={input} onChange={(e) => setInput(e.target.value)}/>\n          <button className='margin-left-4' type='submit'>Add</button>\n        </form>\n        <div className={styles.inactiveWords}>\n          { isOpen && props.defs.filter((d) => d.word !== activeWord).map((def) =>\n            (<TestWord\n              key={def.word}\n              def={def}\n              isActive={def.word === activeWord}\n              onActivate={handleActivate}/>\n            ))}\n        </div>\n        <div className={styles.activeWord}>\n          { isOpen && props.defs.filter((d) => d.word === activeWord).map((def) =>\n              (<TestWord\n                key={def.word}\n                def={def}\n                isActive={def.word === activeWord}\n                onActivate={handleActivate}\n                onRemove={props.onRemove}\n                onComplete={props.onComplete}/>\n              ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nTest.propTypes = {\n  defs: PropTypes.arrayOf(PropTypes.object),\n  decodePhrase: PropTypes.func,\n  onAdd: PropTypes.func,\n  onRemove: PropTypes.func,\n  onComplete: PropTypes.func,\n};\n\nexport default Test;\n","import React, { useEffect, useState } from 'react';\nimport commonData from '../data/common';\nimport decodedData from '../data/decoded';\nimport { useLocalStorage } from '../lib/storage';\nimport decoder from '../lib/decoder';\nimport Common from './Common';\nimport Complete from './Complete';\nimport Reference from './Reference';\nimport Test from './Test';\nimport styles from '../styles/App.module.css';\n\nfunction App(props) {\n  const [saveUrl, setSaveUrl] = useState(undefined);\n  const [test, setTest] = useLocalStorage('test', []);\n  const [complete, setComplete] = useLocalStorage('complete', []);\n  const [decoded, setDecoded] = useLocalStorage('decoded', decodedData);\n  const decodePhrase = decoder(decoded, setDecoded).decodePhrase;\n  const commonWords = commonData.map((c) => c.word);\n  const [common, setCommon] = useState([]);\n\n  useEffect(() => {\n    //??? make more efficient, add back all words\n    //console.log('ENTRIES', Object.entries(decodedData));\n    setCommon(commonWords.slice(0, 100).map((word) => decodedData[word.toLowerCase()]));\n  }, []);\n\n  const save = () => {\n    const testWords = test.map((t) => t.word);\n    const completeWords = complete.map((c) => c.word);\n    const data = {\n      decoded,\n      test: testWords,\n      complete: completeWords,\n    };\n    const file = new File([JSON.stringify(data)], '');\n    setSaveUrl(window.URL.createObjectURL(file));\n  };\n\n  //??? add load\n\n  const addTest = (defs) => {\n    setTest([...test, ...defs]);\n  };\n\n  const removeTest = (def) => {\n    setTest(test.filter((t) => t.word !== def.word));\n  };\n\n  const addComplete = (def) => {\n    setComplete([def, ...(complete.filter((c) => c.word !== def.word))]);\n    setTest(test.filter((t) => t.word !== def.word));\n  };\n\n  return (\n    <React.Fragment>\n      <header className={styles.header}>\n        <h1>Phoneme Finder</h1>\n        { saveUrl &&\n        <a href={saveUrl} download='phonmeFinder.json'>Download</a>\n        }\n        <button onClick={save}>Save</button>\n      </header>\n      <main>\n        <Test\n          defs={test}\n          decodePhrase={decodePhrase}\n          onAdd={addTest}\n          onRemove={removeTest}\n          onComplete={addComplete}/>\n        <Reference decodePhrase={decodePhrase}/>\n        <Complete defs={complete}/>\n        <Common defs={common}/>\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}